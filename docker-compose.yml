services:
  # Database migrations service - runs once on startup
  migrations:
    build:
      context: .
      dockerfile: ./migrations/Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: "no"  # Run once and exit

  # The data collector service
  collector:
    build: ./collector
    env_file:
      - .env
    depends_on:
      migrations:
        condition: service_completed_successfully
      redis:
        condition: service_started
    restart: unless-stopped

  # The data processor service
  processor:
    build: ./processor
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./migrations:/app/shared_models:ro  # Mount migrations models as read-only
    depends_on:
      migrations:
        condition: service_completed_successfully
      redis:
        condition: service_started
    restart: unless-stopped

  # The new API service
  api:
    build: ./api
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./migrations:/app/shared_models:ro  # Mount migrations models as read-only
    depends_on:
      migrations:
        condition: service_completed_successfully
      redis:
        condition: service_started
    ports:
      - "${API_DOCKER_PORT}:8000"
    restart: unless-stopped

  # The frontend service
  frontend:
    build: ./frontend
    env_file:
      - .env
    depends_on:
      - api
    ports:
      - "${FRONTEND_DOCKER_PORT}:3000"
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - .env
    ports:
      - "${PGADMIN_DOCKER_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  redis-gui:
    image: redis/redisinsight:latest
    ports:
      - "${REDIS_INSIGHT_DOCKER_PORT}:5540"
    volumes:
      - redisinsight_data:/data
    depends_on:
      - redis
    restart: unless-stopped

  # The Redis service
  redis:
    image: "redis:alpine"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # The PostgreSQL/TimescaleDB service
  db:
    image: "timescale/timescaledb:latest-pg14"
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    name: ${ENVIRONMENT}_postgres_data
    external: True
  pgadmin_data:
    name: ${ENVIRONMENT}_pgadmin_data
    external: True
  redisinsight_data:
    name: ${ENVIRONMENT}_redisinsight_data
    external: True
